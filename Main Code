import time # Delays
import random # Random numbers and stuff
import threading # Doing 2 things at once
import SaveFileManager # Saving information

#Properties
attack = 0
damage = 2
userHP = 10
enemyHP = 0
turn = 0
active = 0
monsters = ['Zombie', 'Skeleton']

# Autosave loop
def autosave():
    while True:
        if doAutosave == True:
            pass
        time.sleep(100)

#BattleAttack
def monsterAttack(attack, turn, monsterName, userHP, enemyHP):
    if turn == 0:
        print("[Enemy turn...]")
        time.sleep(1)
        print(str(monsterName + " damaged you " + str(int(attack)) + " DMG"))
        userHP = userHP - attack
        turn = 1
    if turn == 1:
        print("[Your turn...]")
        time.sleep(1)
        inputting = True
        while inputting:
            choice = input("[ATTACK] [HEAL] [RUN AWAY]")
            if choice == 'ATTACK':
                print(str("Player chose ATTACK"))
                print(str(damage) + "DMG") #Apparently this works
                turn = 0
                inputting = False
            elif choice == 'HEAL':
                pass
            elif choice == 'RUN AWAY':
                pass
            else:
                print('Invalid Response')
                time.sleep(1)
           
            

#Random Monster Selector
def main():
    while True:
        main = input("[Input 'Start' to begin]").lower()
        if main == 'Start' or 'start':
            while True:
                roll = random.randint(1,2)
                enemyHP = random.randint (10,20)
                while enemyHP >= 1:
                    if roll == 1:
                        active = 1
                        monsterAttack(random.randint(1,3), str(int(0)), random.choice(monsters), userHP, enemyHP)
                    else:
                        print('roll = 2')
                        # Add what you want roll == 0 to do here
                        input()
                    
def startGame():
    autosaveT = threading.Thread(target=autosave)
    autosaveT.start()
    main()
